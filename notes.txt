2016-12-30
- region.html pretty much hooked up so you can get an overview of a region
- location.html hooked up to detail whats at a given location/coordinate. It will start any encounters currently
- combat.html not yet touched, todo:
  - init/resolve a couple of npcs
  - init a player
  - need a mock location to save results to?
  - refactor what's there to use library/helper approach rather than OO.
  - need events emitted at each round, at each combat moment
  - need example hooks for those events to update UI
  - is combat automatic? Or directed. Maybe just offer a continue/flee at each round? That tests interupting a sequence
  - combat completion

2016-11-06
- Started rearranging things in region.html to remove need for array of tiles and always have by-id lookup
- regionGrid becomes primary data structure, region.tiles is just source data.
- "unload" location tiles as they fall out of the simulated area by persisting only those properties that need it?
  - need to cancel any listeners and "freeze" to just capture state. Should be able to persist to disk and just replace with stub data.
  - need game save file /strategy for this. Need sparse index of tiles with non-default state that can be thawed out when that tile becomes a part of a simulated area

states: main menu -> world -> region -> tile/location -> combat/dialogue/examine
paused/playing
combat, dialogue,
local map, world map
menu
turns?

TODO:
[x] work out lazy loading of map region and its entities (done, in region.html)
[x] load 8 squares around player/"camera" - the current tile (done, in region.html)
[.] tiles may make reference to stuff going on in other tiles that requires us to pull them in too
[.] enable unloading/freezing of tiles as they leave the 9
    currently just using resolve.resolveResource(),
    need to use the region object to maintain state and stash these resolved tiles
    then freeze/thaw them as they move in/out of the simulation area
[.] components:
[x]   encounter: entity has optional startScript/endScript properties, which point at implementations in Encounter.
      these methods get passed player(s), tile, game (see location.html)
      simple encounter:
        waypoint: get some score, some bonus for making it here by some time.
          log stuff, display some extra message based on some conditions
        discovery: if player has some information, they spot some extra feature here
          put up announcement message with maybe image + description.
          log the discovery
          place something in inventory/special items?
        npc:
          determine if hostile, start dialog/add message/start combat
          we need combat system, we need npcs.


[.]   actor/player
[.] tile thaw/init/activate:
[.]   thaw out anything in its items
[.]   process any encounters/scripts
[.]   npc scripts?
[.] tile enter
[.]   process encounters/scripts
[.]   describe/render scene
[.]   play out actions from encounters
[.]   update, re-render/describe
[.] tile leave
[.]   process encounters/scripts
[.] tile freeze/deactivate
[.]   tear down, clean up encounters/scripts
[.]   clean up, persist any entities, prepare to be unloaded

--
status: Tackling each piece in individual .htmls.
        Should be able to name and compose these pieces together as patterns emerge
        E.g. the callback in location.html is something like enterLocation(...)
--
observers/models overcooked. Refocus on the game!

I think there's still value in the loader though -
Maybe not Model classes, but prefilling defaults, resolving references.
Can use the same mapping
--
replace models with entities - dumb data.
entities with references?
player has inventory
player.inventory = [
  { $ref: 'some/path/#name' },
]

player.getInventory
player.addToInventory
player.getInventoryItem
player.removeFromInventory

player.getCurrentWeapon
player.assignCurrentWeapon

weapon and inventory should persist alongside actor/player entity data.


--
player: some character with state that we can persist.
players state == game state
tile data: includes location attributes, item/encounter/npc references
region data: list of tiles, maybe some metadata on entry points?
items: types from modules, specific instances are unique?
npcs: ditto
encounters: modules/generic module can examine tile and play out encounter based on npcs, items etc.


some mvps:
 - play through adventure without combat
   start at some point.
   explore map
   encounters and special items on tiles as far as necessary to unlock adventure
   quest logic and completion


start the game
  load saved game / init new game
  load tiles
  render map
  enter initial tile

game
  - container for tiles/regions
  - pointers to current tile
  (delegates from player?)

player state (game state really)
 - save/replay game, needs:
  - history
  - current tile
  - inventory, stats

tile data - static tile data. scripts/interactions
  - items/inventory
  - npcs
  - encounters/behaviors

minimal working UI:
- render some attributes of the current tile
- display player icon with some attributes
- display choices: tile == whole screen.
- n/s/e/w buttons - enabled/disabled as appropriate

-we move from tile a to tile b
  render description/graphics for this tile
  update player visited history
  things that happen when player enters the tile

we engage with NPC
  dialog happens
  inventory is exchanged
  history is updated, some flag is set?

we combat monster
  monster has inventory
  monster has stats
  when monster is dead,
    announce deadness/victory as part of combat
    render change in monster state,
    update tile if the monster was part of the static story/contents of that tile
    the monster's inventory is transfered to the tile
    score update

something is added to player inventory
  update rendering of inventory list
  if its a special item, trigger subroutine
  take it out of wherever it came from


--
observer/subscriber thoughts:

model property 'bar' on 'foo' changed.
resolve 'bar' to some unambiguous id, get listeners and hand event to them

model ids are auto-generated.
So if we want the UI to display player attributes we might say:
on player attribute change -> update && render
where player is an object created and re-created at runtime
so we need to alias 'player model id' to 'player' whenever we (re)create player
location is a fixed reference to the current tile.
 it points at different tile objects at runtime
 we want to be able to have the UI render location and any changes
 so when location is updated (its an observable) it dispatches an event

location is a getter to tiles[current_position]
  tile property changes publish tile_id/contents:change
  switchboard looks up tile_id, discovers it is aliased as 'location' and re-broadcasts


bind referen
--
Layer masks in pixelmator: http://www.pxm-tuts.com/tutorials/tools/layer-masks/
Icons:

* Baddie icon for encounters and combat
  Icon.1_22.png
  Icon.1_28.png
  Icon.4_95.png

* Dead baddie
  Icon.2_51.png

* Hero icon: you
  Icon.1_80.png
  Icon.1_05.png
  Icon.2_67.png

* Hero death:
  Icon.4_63.png

* Weapon Attack icon
  Icon.5_46.png

* Magic attack
  Icon.5_97.png

* Select target icon:
  Icon.1_07.png

* Start battle
  Icon.3_64.png
  Icon.4_37.png

* Flee battle
  Icon.4_33.png

* Money/gold icon:
  Icons8_78.png

--
resources:

* player
  /:username
  properties like:
    role: "hero",
    speed: 150,
    hitPoints: 100,
    damage: 0,
    spriteSheet: "characters",
    spriteY: 0,
    animated: true,
    sound: {
      attack: "hero_attacks", // or is this a weapon property?
      hit: "ugh",
      reborn: "alive",
      dies: "dead"
    }
    weapons: [
      {id: "spear"}
    ],

* map
  /map
* region
  /map/:region
  -> { tiles: [], moduleid: 'regions/theplains' }
* tile
  /map/:region/:tile
* npc
  /:npcid
* item
  /:itemid
* world
  /:coords
  -> { region: { tiles: [], bounds: {type:'rect', pts: []} }}


place the player into the world, and the starting point
 - the player object
 - enough of the map to show the starting point
 - any objects associated with that pt/region
 - any encounter scripts or other region-logic
 - trigger enter the region
 - trigger enter the tile

the game loads the world location:
  it gets any game state, starts timers, and so on.
the game loads the player
  it gets any saved location, stats, inventory
the game loads the starting location
  it returns the region and the current tile
  (we can pass a coord and it resolves this )


NPC groups (beta/demo):

Rat infestation in house: 3 Huge Rats, 2 Giant Rats, 2 Mutant Rats: 15,15
Goblins in plains:
1. 3 Goblins, 1 Goblin Shaman: 8,22
2. 4 Goblins, 1 Goblin Shaman: 3,19
3. 5 Goblins, 1 Goblin Shaman, 1 Goblin Chieftain: 5,17
Trolls in pass:
1. 2 Juvenile Trolls, 2 Trolls: 4,5
2. 4 Trolls, 1 Troll Elder, 1 Troll Hulk: 4,2


Items (beta/demo):

11,21:
Description: You find a sizeable, strong-looking stick which you decide could be used for fighting
and might even store a small amount of Magical power.
Effect: You find a Stick
21,17:
Description: You find a sizeable, strong-looking stick which you decide could be used for fighting
and might even store a small amount of Magical power.
Effect: You find a Stick
4,11:
Description: You find a small Dagger lying on the ground along with the body of a young boy and
several Goblins.
Effect: You find a Dagger
18,8:
Description: You find a slightly rusted but servicable Sword washed up on the shores of a small
river.
Effect: You find a Sword


